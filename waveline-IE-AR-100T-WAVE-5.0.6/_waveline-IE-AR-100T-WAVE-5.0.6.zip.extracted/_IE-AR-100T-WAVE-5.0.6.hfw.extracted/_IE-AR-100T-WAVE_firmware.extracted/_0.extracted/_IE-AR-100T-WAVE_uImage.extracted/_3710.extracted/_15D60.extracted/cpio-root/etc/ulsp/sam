# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
PORTFW_N='0'
FW_RULES_N='0'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP addre
BLWH_LIST_TYPE='black'
BLWH_LIST_N='0'
# values: one of 'none', 'peer', 'gateway'
IPSEC_MODE='none'
# values: one of 'eth0', 'eth1'
IPSEC_PHYSICAL_ITF='eth1'
# values: 'yes' or 'no'
IPSEC_NAT_TRAVERSAL='yes'
# values: 'yes' or 'no'
IPSEC_USE_X509='yes'
###################
# Peer Mode only: #
###################
# The IP address of the remote IPSec Gateway.
# values: 'a valid IP-ADDRESS'
IPSEC_PR_GW_IP='192.168.2.100'
IPSEC_PR_GW_PSK='secret'
IPSEC_PR_P12_PASS=''
######################
# Gateway Mode only: #
######################
# The IPSec gateway should operate in the native mode.
# values: 'yes' or 'no'
IPSEC_GW_NATIV_MODE='yes'
IPSEC_GW_NATIV_ADDR='10.8.0.10'
IPSEC_GW_NATIV_MASK='255.255.255.0'
IPSEC_GW_NATIV_POOL='25'
IPSEC_GW_NATIV_DNS='10.8.0.254'
IPSEC_GW_NATIV_WINS='10.8.0.254'
# The IPSec gateway should operate with L2TP support.
# values: 'yes' or 'no'
IPSEC_GW_L2TP_MODE='yes'
# The IPSec gateway is configured with the useage of PSK's.
# The following section stores the IP-PSK relationship.
# count of IPSec peers
# value: integer, 0-127
IPSEC_PEERS_N='0'
# Enable the OSPF from Quagga Routing Suite
# values: 'yes', 'no'
OPT_OSPF='no'
# Router name
# value: string, 0 to 127 characters
OSPF_HOSTNAME=''
# OSPF authentication key
# value: string, 0 to 127 characters
OSPF_AUTH_KEY='detmold'
# RFC1583 compatibility
# values: 'yes', 'no'
OSPF_RFC1583='yes'
# OSPF telnet password
# value: string, 0 to 127 characters
OSPF_TELNET_PASSWORD=''
# Enable propagation of static routes
# values: 'yes', 'no'
OSPF_PROPAGATE_STATIC='no'
# Priority for area 1
# value: integer (1-255)
OSPF_PRIO_AREA1='1'
# Interface configuration
# Enable interface eth0 for OSPF
# value: 'yes', 'no'
OSPF_ACTIVATE_ETH0='yes'
# Enable interface eth1 for OSPF
# value: 'yes', 'no'
OSPF_ACTIVATE_ETH1='yes'
# Hello intervall for eth0
# value: integer (1-65535)
OSPF_HELLO_ETH0='10'
# Hello intervall for eth1
# value: integer (1-65535)
OSPF_HELLO_ETH1='10'
# Dead intervall for eth0
# value: integer (1-65535), should be 4 x OSPF_ETH_0_HELLO
OSPF_DEAD_ETH0='40'
# Dead intervall for eth1
# value: integer (1-65535), should be 4 x OSPF_ETH_0_HELLO
OSPF_DEAD_ETH1='40'
# Network type for eth0
# value: string, (broadcast, non-broadcast, point-to-multipoint, point-to-point)
OSPF_NET_ETH0='broadcast'
# Network type for eth1
# value: string, (broadcast, non-broadcast, point-to-multipoint, point-to-point)
OSPF_NET_ETH1='broadcast'
# Redundant Dialout Config
# redundant dialout type
# values: 'none', 'simple', 'peer', 'target'
REDUNT_TYP='none'
# 'simple' redundant dialout parameters
# the following is only needed if type is 'simple' or 'peer'
REDUNT_IFACE='eth0'
REDUNT_IP=''
REDUNT_PORT='18180'
# token that must be exchanged with the dialout router
# values: any valid string
REDUNT_PASS='detmold'
# activate parallel redundant functionality
# values: 'none', 'recessive', 'dominant'
REDUNT_PARA='none'
# 'peer' redundant dialout parameters
# the following is only needed if type is 'peer'
REDUNT_REMOTE_CONTROL='192.168.1.1'
REDUNT_REMOTE_INT='5'
REDUNT_REMOTE_MAX='2'
# 'target' / 'peer' redundant dialout parameters
# the following is only needed if type is 'peer' or 'target'
REDUNT_EX_PORT='18181'
# Enable dialout on this router
# values: 'yes', 'no'
RDIAL_OPT='no'
# Port the dialout-daemon waits on
# values: any valid port number
RDIAL_PORT='18180'
# Pass the dialout daemon check inside requests
# values: any valid string
RDIAL_PASS='detmold'
# List of IP's that might request dialout
# values: any valid ip
RDIAL_CLIENT_N='0'
#RDIAL_CLIENT_x_IP
# Redundant Dialout Config
# redundant dialout type
# values: 'none', 'simple', 'peer', 'target'
REDUNT_TYP='none'
# 'simple' redundant dialout parameters
# the following is only needed if type is 'simple' or 'peer'
REDUNT_IFACE='eth0'
REDUNT_IP=''
REDUNT_PORT='18180'
# token that must be exchanged with the dialout router
# values: any valid string
REDUNT_PASS='detmold'
# activate parallel redundant functionality
# values: 'none', 'recessive', 'dominant'
REDUNT_PARA='none'
# 'peer' redundant dialout parameters
# the following is only needed if type is 'peer'
REDUNT_REMOTE_CONTROL='192.168.1.1'
REDUNT_REMOTE_INT='5'
REDUNT_REMOTE_MAX='2'
# 'target' / 'peer' redundant dialout parameters
# the following is only needed if type is 'peer' or 'target'
REDUNT_EX_PORT='18181'
# Enable dialout on this router
# values: 'yes', 'no'
RDIAL_OPT='no'
# Port the dialout-daemon waits on
# values: any valid port number
RDIAL_PORT='18180'
# Pass the dialout daemon check inside requests
# values: any valid string
RDIAL_PASS='detmold'
# List of IP's that might request dialout
# values: any valid ip
RDIAL_CLIENT_N='0'
#RDIAL_CLIENT_x_IP
PORTFW_N='0'
# root password (encrypted)
# default is 'detmold'
SYSTEM_USER_PASS='$1$LEHbR1Rw$B0IFJ1jBSJB7Tk3XRMruv0'
# enable NAT on an interface
# values: 'none', 'eth0', 'eth1'
VMAP_ITF='none'
VMAP_VIRTETH_N='0'
# current DynDNS provider
# values: 'none' or any updatedd provider tag, one of: 
#         'hn', 'regfish', 'eurodyndns', 'noip', 'dyndns', 'tzo', 'changeip', 'ovh', 'ods' 
DYNDNS_PROVIDER='none'
# hostname registered at the provider
# values: any valid hostname
DYNDNS_HOST=''
# user name according to the chosen DynDNS Provider
# values: any valid name
DYNDNS_USER=''
# password according to the user name
# values: any valid pass
DYNDNS_PASS=''
# SNMP system name
# value: string, 5 to 127 characters
SNMP_SYSNAME=''
# SNMP system location
# value: string, 5 to 127 characters
SNMP_SYSLOCATION='Detmold'
# SNMP system contact (email)
# value: string, 5 to 32 characters
SNMP_SYSCONTACT='info@weidmueller.com'
# SNMP read only community 
# value: string, 5 to 32 characters
SNMP_ROCOMMUNITY='public'
# SNMP read/write community 
# value: string, 5 to 32 characters
SNMP_RWCOMMUNITY='private'
# SNMP trap community 
# value: string, 5 to 32 characters
SNMP_TRAPCOMMUNITY='public'
# SNMP trap receiver count
# value: number of configured trap receivers
SNMP_TRAPSINK_N='0'
# SNMPv3 user
# value: string, 5 to 32 characters
SNMP_V3USER='admin'
# SNMPv3 authentication type
# value: 'MD5', 'SHA'
SNMP_V3AUTHTYPE='MD5'
# SNMPv3 authentication password
# value: string, at least 8 characters
SNMP_V3AUTHPASS='detmold08'
# SNMPv3 privacy protocol
# value: 'DES', 'AES'
SNMP_V3PRIVPROT='DES'
# SNMPv3 privacy password
# value: string, at least 8 characters
SNMP_V3PRIVPASS='detmold08'
# Use L2TP
L2TP_CHAP_USER=''
L2TP_CHAP_PASS=''
L2TP_PPP_ADDR='192.168.17.99'
L2TP_PPP_STRT='192.168.17.128'
L2TP_PPP_STOP='192.168.17.254'
L2TP_PPP_MS_DNS=''
L2TP_PPP_MS_WINS=''
PORTFILTER_1_PORT='135:139'
PORTFILTER_2_PORT='445'
PORTFILTER_1_RULE='reject'
PORTFILTER_2_RULE='reject'
PORTFILTER_N='2'
# remote name server
# value: any valid ip address
DNS_FORWARDERS='145.253.2.11'
# number of hosts to resolve in name server
HOST_N='0'
# interface the DHCP server should listen on
# values: 'none', 'eth0', 'eth1'
DHCPD_INTERFACE='none'
# DHCP lease time for renew in seconds
# value: between 3600 and 2^31
DHCPD_LEASE_TIME='86400'
# DHCP ip range
# value: any valid ip address, must be within one subnet
DHCPD_LEASE_START='192.168.1.20'
DHCPD_LEASE_END='192.168.1.50'
# subnet of the DHCP ip range
# value: any legal subnet address
DHCPD_SUBNET='255.255.255.0'
# optional gateway for DHCP
# value: any valid ip address
DHCPD_GATEWAY='192.168.1.100'
# optional name server for DHCP
# value: any valid ip address
DHCPD_DNS='192.168.1.100'
# optional DHCP domain
# value: string, between 4 and 127 characters
DHCPD_DOMAIN=''
# values: one of 'none', 'peer', 'gateway'
IPSEC_MODE='none'
# values: one of 'eth0', 'eth1'
IPSEC_PHYSICAL_ITF='eth1'
# values: 'yes' or 'no'
IPSEC_NAT_TRAVERSAL='yes'
# values: 'yes' or 'no'
IPSEC_USE_X509='yes'
###################
# Peer Mode only: #
###################
# The IP address of the remote IPSec Gateway.
# values: 'a valid IP-ADDRESS'
IPSEC_PR_GW_IP='192.168.2.100'
IPSEC_PR_GW_PSK='secret'
IPSEC_PR_P12_PASS=''
######################
# Gateway Mode only: #
######################
# The IPSec gateway should operate in the native mode.
# values: 'yes' or 'no'
IPSEC_GW_NATIV_MODE='yes'
IPSEC_GW_NATIV_ADDR='10.8.0.10'
IPSEC_GW_NATIV_MASK='255.255.255.0'
IPSEC_GW_NATIV_POOL='25'
IPSEC_GW_NATIV_DNS='10.8.0.254'
IPSEC_GW_NATIV_WINS='10.8.0.254'
# The IPSec gateway should operate with L2TP support.
# values: 'yes' or 'no'
IPSEC_GW_L2TP_MODE='yes'
# The IPSec gateway is configured with the useage of PSK's.
# The following section stores the IP-PSK relationship.
# count of IPSec peers
# value: integer, 0-127
IPSEC_PEERS_N='0'
# enable digital input monitoring
# values: 'yes', 'no'
DIGIN_OPT='no'
# DI 1 LH-edge
# values: 'yes', 'no'
DIGIN_DI1LH='no'
# DI 1 HL-edge
# values: 'yes', 'no'
DIGIN_DI1HL='no'
# DI 2 LH-edge
# values: 'yes', 'no'
DIGIN_DI2LH='no'
# DI 2 HL-edge
# values: 'yes', 'no'
DIGIN_DI2HL='no'
# interface to send/receive lldp packages on
# values: 'none', 'eth0', 'eth1'
LLDPD_INTERFACE='none'
FW_RULES_N='0'
# one of ftp, http (and may be later on scp) 
UPDATE_PROTOCOL='ftp'
# ip of update server
UPDATE_SERVER='192.168.1.1'
# path to firmware file on server
UPDATE_PATH='/'
# name of the firmware
# this is an tgz archive that includes:
# required:
#   - rootfs and its checksum
#   - kernel and its checksum
# optional:
#   - additional scripts to work on
#   - additional files (f.e. configfs or parts)
UPDATE_FILE='IE-AR-100T-WAVE_firmware'
# Enable the OSPF from Quagga Routing Suite
# values: 'yes', 'no'
OPT_OSPF='no'
# Router name
# value: string, 0 to 127 characters
OSPF_HOSTNAME=''
# OSPF authentication key
# value: string, 0 to 127 characters
OSPF_AUTH_KEY='detmold'
# RFC1583 compatibility
# values: 'yes', 'no'
OSPF_RFC1583='yes'
# OSPF telnet password
# value: string, 0 to 127 characters
OSPF_TELNET_PASSWORD=''
# Enable propagation of static routes
# values: 'yes', 'no'
OSPF_PROPAGATE_STATIC='no'
# Priority for area 1
# value: integer (1-255)
OSPF_PRIO_AREA1='1'
# Interface configuration
# Enable interface eth0 for OSPF
# value: 'yes', 'no'
OSPF_ACTIVATE_ETH0='yes'
# Enable interface eth1 for OSPF
# value: 'yes', 'no'
OSPF_ACTIVATE_ETH1='yes'
# Hello intervall for eth0
# value: integer (1-65535)
OSPF_HELLO_ETH0='10'
# Hello intervall for eth1
# value: integer (1-65535)
OSPF_HELLO_ETH1='10'
# Dead intervall for eth0
# value: integer (1-65535), should be 4 x OSPF_ETH_0_HELLO
OSPF_DEAD_ETH0='40'
# Dead intervall for eth1
# value: integer (1-65535), should be 4 x OSPF_ETH_0_HELLO
OSPF_DEAD_ETH1='40'
# Network type for eth0
# value: string, (broadcast, non-broadcast, point-to-multipoint, point-to-point)
OSPF_NET_ETH0='broadcast'
# Network type for eth1
# value: string, (broadcast, non-broadcast, point-to-multipoint, point-to-point)
OSPF_NET_ETH1='broadcast'
# Log level (priority).
# value: String, one of
# Emerg     system is unusable
# Alert     action must be taken immediately
# Critical  critical conditions
# Error     error conditions
# Warning   warning conditions
# Notice    normal but significant condition
# Info      informational
# Debug     debug-level messages
SYSLOGD_LOG_LEVEL='Warning'
# Enable remote logging
# value: 'yes', 'no'
SYSLOGD_REMOTE_LOG='no'
# Message receiver.
# value: every legal ip address
SYSLOGD_REMOTE_HOST=''
# Message receiver port.
# value: every legal UDP port
SYSLOGD_REMOTE_PORT='514'
CA_CRT_PATH='/tmp/certs'
CA_CNF_PATH='/tmp/certs/config'
CA_CMD_PATH='/usr/sbin'
# The Security Officer is the CA's owner!
# Security Officer password
CA_SO_PASS='detmold'
# A Security User is a certificates owner!
# Security User password
CA_SU_PASS='detmold'
CA_P12_NAME='IE-AR-100T-WAVE-VPN'
X509_CA_CFG='RouterCA.config'
X509_CA_EXT='RouterCA.ext'
X509_CA_CRC='RouterCRL.config'
X509_CA_BIT='1024'
X509_CA_DAY='1825'
X509_CA_SER='routerca.serial'
X509_CA_CDB='index.txt'
X509_CA_DBA='index.txt.attr'
X509_CA_CSR='routerca.csr.pem'
X509_CA_CRL='routerca.crl.pem'
X509_CA_KEY='routerca.key.pem'
X509_CA_CRT='routerca.crt.pem'
X509_GW_CFG='VPNServer.config'
X509_GW_EXT='VPNServer.ext'
X509_GW_DAY='365'
X509_GW_CSR='vpngateway.csr.pem'
X509_GW_CRT='vpngateway.crt.pem'
X509_GW_KEY='vpngateway.key.pem'
X509_GW_PKY='vpngateway.key.plain.pem'
X509_GW_DHP='vpngateway.dhp.pem'
X509_GW_P12='vpngateway.p12'
X509_PR_CFG='VPNClient.config'
X509_PR_EXT='VPNClient.ext'
X509_PR_DAY='365'
X509_PR_CSR='vpnpeer.csr.pem'
X509_PR_CRT='vpnpeer.crt.pem'
X509_PR_KEY='vpnpeer.key.pem'
X509_PR_P12='vpnpeer.p12'
# enable NTP server
# values: 'yes', 'no'
OPT_NTP='no'
# stratum of the device
# values: between 1 and 15 (but better never < 5)
NTP_LOCAL_STRATUM='10'
NTP_ON_BOOT='no'
# Number of remote NTP
NTP_REMOTE_N='4'
# remote time server to use (we probably don't have a RTC)
# value: any legal ip or hostname
NTP_REMOTE_1_IP='0.de.pool.ntp.org'
# type of remote NTP server
# values: 'server', 'peer'
NTP_REMOTE_1_TYPE='server'
NTP_REMOTE_1_PORT='123'
NTP_REMOTE_2_IP='1.de.pool.ntp.org'
NTP_REMOTE_2_TYPE='server'
NTP_REMOTE_2_PORT='123'
NTP_REMOTE_3_IP='2.de.pool.ntp.org'
NTP_REMOTE_3_TYPE='server'
NTP_REMOTE_3_PORT='123'
NTP_REMOTE_4_IP='3.de.pool.ntp.org'
NTP_REMOTE_4_TYPE='server'
NTP_REMOTE_4_PORT='123'
# Interface to send NTP broadcasts
# value: 'none', 'eth0', 'eth1'
NTP_BROADCAST_ITF='none'
# Broadcast interval in seconds
# value: between 30 and 500
NTP_BROADCAST_INTERVAL='30'
# Interface to listen for NTP requests
# values: 'none', 'eth0', 'eth1'
NTP_SERVER_ITF='none'
# timezone where the device is working
# values: unix specific timezone
NTP_TIME_INFO='UCT-1UCST,M3.5.0,M10.5.0'
# ATTENTION: NEED TO BE DOCUMENTED
NTP_TZ_IDX='0'
# OpenVPN Config
# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'
# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'
# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'
# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'
# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'
# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'
# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'
# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'
# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'
# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'
# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'
# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'
# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!
# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).
# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.
# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!
# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'
# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody
# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log
# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'
# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'
# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
BLWH_LIST_TYPE='black'
BLWH_LIST_N='0'
# device to use
# values: 'none', 'ttyS1', 'ttyS2'
DIALIN_DEV='none'
# enable DialIn
# values: 'dialin', 'callback'
DIALIN_MODE='dialin'
# DialIn username/password
# values: any valid string
DIALIN_USER=''
DIALIN_PASS=''
# DialIn local IP
# values: any valid IP address/prefix pair
DIALIN_LOCAL_IP='192.168.7.1'
# DialIn remote IP
# values: any valid IP address/prefix pair
DIALIN_PEER_IP='192.168.7.2'
# DialIn masquerade
# values: 'no', 'yes'
DIALIN_MASQ='no'
# DialIn modem initialzation
# values: any valid AT commandlist
DIALIN_INIT_AT='ATQ0V1H0 OK ATS0=0Q0&D3&C1 OK'
# define default route
# values: 'eth', 'ppp', 'none'
DEFAULT_GW_ITF='none'
# default gateway
# value: every legal ip address
DEFAULT_GW_IP='192.168.1.100'
# count of static routes
# value: integer, 0-127
STATIC_ROUTE_N='0'
# static route target IP
# value: any valid ip/netmask pair
STATIC_ROUTE_x_TARGET=''
# static route Gateway
# value: any valid ip 
STATIC_ROUTE_x_GWAY=''
# masquerade subnet
# values: 'no', 'yes'
STATIC_ROUTE_x_MASQ='no'
# current hostname of the device
# value: string, between 4 and 25 characters, no white spaces
HOSTNAME='router'
# current domain name of the device
# value: string, between 4 and 25 characters
DOMAIN_NAME='domain.com'
# type of ip address 
# values: 'static', 'dhcp', 'auto'
IP_ETH0_TYPE='static'
# static ip address and netmask of eth0
# value: every legal ip address/netmask
IP_ETH0_IPADDR='192.168.1.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH0_MASQ='no'
# type of ip address
# values: 'static', 'dhcp', 'auto'
IP_ETH1_TYPE='static'
# static ip address and netmask of eth1
# value: every legal ip address/netmask
IP_ETH1_IPADDR='192.168.2.100/24'
# enable subnet masquerading
# values: 'yes', 'no'
IP_ETH1_MASQ='no'
# country code (intern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
INT_MODEM_COUNTRY_CODE='04'
INT_MODEM_ISDN_MSN=''
INT_MODEM_GSM_PIN=''
INT_MODEM_GSM_ATCMD=''
# modem type (extern)
# values: 'none', 'analog', 'isdn', 'gsm', 'dsl'
EXT_MODEM_TYPE='none'
# country code (extern)
# values: country code int the GCI T.35 standard (hex)
# default is DE
EXT_MODEM_COUNTRY_CODE='04'
EXT_MODEM_ISDN_MSN=''
EXT_MODEM_GSM_PIN=''
EXT_MODEM_GSM_ATCMD=''
# define dialout device
# values: 'none', 'ttyS1', 'ttyS2', 'eth0', 'eth1'
DIALOUT_DEV='none'
# define dialout MTU (maximum transmit unit)
# value: 1-1500
DIALOUT_MTU='576'
# define dialout MRU (maximum receive unit)
# value: 1-1500
DIALOUT_MRU='576'
# AT commands to pass to the modem
# value: any valid list of AT commands
DIALOUT_MODEM_CMD='L0M0X3'
# Dialout ISP list
# Number of elements in list
DIALOUT_ISP_N='1'
DIALOUT_ISP_1_NAME='MSN'
DIALOUT_ISP_1_USER='msn'
DIALOUT_ISP_1_PASS='msn'
DIALOUT_ISP_1_NUM='0,0192658'
# currently selected ISP
# values: one of the above configured ISPs
DIALOUT_ISP_ACTIVE='1'
# disconnect idle time in seconds
# value: 0 for disable, 1-300
DIALOUT_IDLE_TIME='80'
# number of DialOut retries
# values: between '0' and '100', 0 means infinite
DIALOUT_RETRIES='1'
# Time between dialout failure and retry in seconds
# values: between '0' and '300'
DIALOUT_RETRY_DELAY='30'
# GPRS DialOut specific data
DIALOUT_GPRS_APN=''
# one of ftp, http (and may be later on scp) 
UPDATE_PROTOCOL='ftp'
# ip of update server
UPDATE_SERVER='192.168.1.1'
# path to firmware file on server
UPDATE_PATH='/'
# name of the firmware
# this is an tgz archive that includes:
# required:
#   - rootfs and its checksum
#   - kernel and its checksum
# optional:
#   - additional scripts to work on
#   - additional files (f.e. configfs or parts)
UPDATE_FILE='IE-AR-100T-WAVE_firmware'
# device to use
# values: 'none', 'ttyS1', 'ttyS2'
DIALIN_DEV='none'
# enable DialIn
# values: 'dialin', 'callback'
DIALIN_MODE='dialin'
# DialIn username/password
# values: any valid string
DIALIN_USER=''
DIALIN_PASS=''
# DialIn local IP
# values: any valid IP address/prefix pair
DIALIN_LOCAL_IP='192.168.7.1'
# DialIn remote IP
# values: any valid IP address/prefix pair
DIALIN_PEER_IP='192.168.7.2'
# DialIn masquerade
# values: 'no', 'yes'
DIALIN_MASQ='no'
# DialIn modem initialzation
# values: any valid AT commandlist
DIALIN_INIT_AT='ATQ0V1H0 OK ATS0=0Q0&D3&C1 OK'
# define dialout device
# values: 'none', 'ttyS1', 'ttyS2', 'eth0', 'eth1'
DIALOUT_DEV='none'
# define dialout MTU (maximum transmit unit)
# value: 1-1500
DIALOUT_MTU='576'
# define dialout MRU (maximum receive unit)
# value: 1-1500
DIALOUT_MRU='576'
# AT commands to pass to the modem
# value: any valid list of AT commands
DIALOUT_MODEM_CMD='L0M0X3'
# Dialout ISP list
# Number of elements in list
DIALOUT_ISP_N='1'
DIALOUT_ISP_1_NAME='MSN'
DIALOUT_ISP_1_USER='msn'
DIALOUT_ISP_1_PASS='msn'
DIALOUT_ISP_1_NUM='0,0192658'
# currently selected ISP
# values: one of the above configured ISPs
DIALOUT_ISP_ACTIVE='1'
# disconnect idle time in seconds
# value: 0 for disable, 1-300
DIALOUT_IDLE_TIME='80'
# number of DialOut retries
# values: between '0' and '100', 0 means infinite
DIALOUT_RETRIES='1'
# Time between dialout failure and retry in seconds
# values: between '0' and '300'
DIALOUT_RETRY_DELAY='30'
# GPRS DialOut specific data
DIALOUT_GPRS_APN=''
CA_CRT_PATH='/tmp/certs'
CA_CNF_PATH='/tmp/certs/config'
CA_CMD_PATH='/usr/sbin'
# The Security Officer is the CA's owner!
# Security Officer password
CA_SO_PASS='detmold'
# A Security User is a certificates owner!
# Security User password
CA_SU_PASS='detmold'
CA_P12_NAME='IE-AR-100T-WAVE-VPN'
X509_CA_CFG='RouterCA.config'
X509_CA_EXT='RouterCA.ext'
X509_CA_CRC='RouterCRL.config'
X509_CA_BIT='1024'
X509_CA_DAY='1825'
X509_CA_SER='routerca.serial'
X509_CA_CDB='index.txt'
X509_CA_DBA='index.txt.attr'
X509_CA_CSR='routerca.csr.pem'
X509_CA_CRL='routerca.crl.pem'
X509_CA_KEY='routerca.key.pem'
X509_CA_CRT='routerca.crt.pem'
X509_GW_CFG='VPNServer.config'
X509_GW_EXT='VPNServer.ext'
X509_GW_DAY='365'
X509_GW_CSR='vpngateway.csr.pem'
X509_GW_CRT='vpngateway.crt.pem'
X509_GW_KEY='vpngateway.key.pem'
X509_GW_PKY='vpngateway.key.plain.pem'
X509_GW_DHP='vpngateway.dhp.pem'
X509_GW_P12='vpngateway.p12'
X509_PR_CFG='VPNClient.config'
X509_PR_EXT='VPNClient.ext'
X509_PR_DAY='365'
X509_PR_CSR='vpnpeer.csr.pem'
X509_PR_CRT='vpnpeer.crt.pem'
X509_PR_KEY='vpnpeer.key.pem'
X509_PR_P12='vpnpeer.p12'
