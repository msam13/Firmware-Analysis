# OpenVPN Config

# Enable OpenVPN
# values: 'none', 'client', 'server', 'tunnel'
OVPN_MODE='none'

# OpenVPN use X.509 based authentication:
# values: 'yes' or 'no'
OVPN_USE_X509='no'

# The listening OpenVPN interface:
# Which local IP address should OpenVPN
# listen on? (optional)
# values: 'udp', 'tcp'
OVPN_LISTEN_IF='eth1'
OVPN_PRIVATE_IF='eth0'

# The tunnel based protocol.
# TCP or UDP server?
# values: 'udp', 'tcp'
OVPN_PROTOCOL='udp'

# The VPN interface port.
# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
# values: default is '1194'
OVPN_PORT='1194'

# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
# values: 'tun', 'tap'
OVPN_DEV_TYPE='tun'

# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel if you
# have more than one.  On XP SP2 or higher,
# you may need to selectively disable the
# Windows firewall for the TAP adapter.
# Non-Windows systems usually don't need this.
# values: 'text'
OVPN_DEV_NODE='MyTap'

# The data in the tunnel should be lzo-compressed?
# values: 'lzo', ''
OVPN_COMPRESSION='lzo'

# The ip address or the DNS name of the remote host.
# values: 'ip address', 'remotehost.remotenet.domain'
OVPN_HOST_REMOTE='192.168.1.1'
OVPN_PORT_REMOTE='1194'

# The ip address of the local tunnel interface.
# values: 'virtual ip address'
OVPN_TUNNEL_LOCAL='10.8.0.3'

# The ip address of the local remote interface.
# values: 'virtual ip address'
OVPN_TUNNEL_REMOTE='10.8.0.4'

# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
# values: 'a valid IP and Mask'
OVPN_SVR_NET='10.8.0.0'
OVPN_SVR_MASK='255.255.255.0'

# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned. "ifconfig-pool-persist"
# values: 'name of the ip list file'
OVPN_SVR_IP_POOL_PERSIST='ipp.txt'

# Activate server mode for ethernet bridging.
# values: 'yes', 'no'
OVPN_SVR_BRIDGING_MODE='no'

# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
# ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100
# values: 'a valid IP and Mask'
OVPN_SVR_BRIDGE_IF_IP=''
OVPN_SVR_BRIDGE_IF_MASK=''
OVPN_SVR_BRIDGE_IPRANGE_START=''
OVPN_SVR_BRIDGE_IPRANGE_STOP=''

# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
#;push "route 192.168.10.0 255.255.255.0"
#;push "route 192.168.20.0 255.255.255.0"
# values: '[IP] [MASK]'
OVPN_SVR_PUSH_ROUTE_N='2'
OVPN_SVR_PUSH_ROUTE_NET_1='192.168.10.0'
OVPN_SVR_PUSH_ROUTE_MASK_1='255.255.255.0'
OVPN_SVR_PUSH_ROUTE_NET_2='192.168.20.0'
OVPN_SVR_PUSH_ROUTE_MASK_2='255.255.255.0'
# NOT USED YET!

# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).

# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
#;client-config-dir ccd
#;route 192.168.40.128 255.255.255.248
# values: '[IP] [MASK]'
OVPN_SVR_HARD_ROUTE_N='0'
OVPN_SVR_HARD_ROUTE_1=''
OVPN_SVR_HARD_ROUTE_2=''
# NOT USED YET!

# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.

# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
#;client-config-dir ccd
#;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2
# NOT USED YET!

# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
#;learn-address ./script
# NOT USED YET!

# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# the TUN/TAP interface to the internet in
# order for this to work properly).
# CAVEAT: May break client's network config if
# client's local DHCP server packets get routed
# through the tunnel.  Solution: make sure
# client's local DHCP server is reachable via
# a more specific route than the default route
# of 0.0.0.0/0.0.0.0.
#;push "redirect-gateway"
# values: 'yes', 'no'
OVPN_SVR_REDIRECT_DEFAULT='no'

# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
#;push "dhcp-option DNS 10.8.0.1"
#;push "dhcp-option WINS 10.8.0.1"
OVPN_SVR_DNS='10.8.0.1'
OVPN_SVR_WINS='10.8.0.1'

# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
#;client-to-client
# values: 'yes', 'no'
OVPN_SVR_CLIENT_VISIBILITY='yes'

# The maximum number of concurrently connected
# clients we want to allow.
#;max-clients 100
# values: '', '<MAX-COUNT-VALUE>'
OVPN_SVR_CLIENTS_MAX='25'

# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
#keepalive 10 120
OVPN_PEER_KEEPALIVE_INTERVAL='10'
OVPN_PEER_KEEPALIVE_TIMEOUT='60'

# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
#persist-key
#persist-tun

# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
#
# You can uncomment this out on
# non-Windows systems.
#;user nobody
#;group nobody

# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
#status openvpn-status.log

# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
#;log         openvpn.log
#;log-append  openvpn.log

# Set the appropriate level of log
# file verbosity.
#
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
OVPN_VERB='3'

# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
#;mute 20

# count of OpenVPN push routes
# value: integer, 0-127
OVPN_ROUTE_N='1'

# peer name/synonym
# value: any valid ip or synonym, 
#        but no DNS name!
#OVPN_ROUTE_x_NET=''
OVPN_ROUTE_1_NET='192.168.10.0'

# peer's pree shared key
# value: a secure password
#OVPN_ROUTE_x_MASK=''
OVPN_ROUTE_1_MASK='255.255.255.0'
OVPN_PKCS12_PASSWD=''
